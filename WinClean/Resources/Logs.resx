<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CanceledScriptExecution" xml:space="preserve">
    <value>Canceled script execution</value>
    <comment>@Invariant</comment>
  </data>
  <data name="CapabilityDetectionDone" xml:space="preserve">
    <value>Capability detection of '{0}' done. Effective : '{1}'</value>
    <comment>0 : script InvariantName
1 : effective capability InvariantName@Invariant</comment>
  </data>
  <data name="CapabilityDetectionStarted" xml:space="preserve">
    <value>Capability detection of '{0}' started.</value>
    <comment>0 : script InvariantName@Invariant</comment>
  </data>
  <data name="CapabilityDetectionCanceled" xml:space="preserve">
    <value>Capability detection of '{0}' canceled.</value>
    <comment>0 : script InvariantName@Invariant</comment>
  </data>
  <data name="ClearedLogsFolder" xml:space="preserve">
    <value>Cleared logs folder.</value>
    <comment>@Invariant</comment>
  </data>
  <data name="Exiting" xml:space="preserve">
    <value>Exiting the application with code {0}.</value>
    <comment>0 : exit code@Invariant</comment>
  </data>
  <data name="FailedToDeleteLogFile" xml:space="preserve">
    <value>Failed to delete log file '{0}': {1}</value>
    <comment>0 : filename
1 : exception@Invariant</comment>
  </data>
  <data name="FinishedScriptExecution" xml:space="preserve">
    <value>Finished script execution.</value>
    <comment>0 : number of scripts executed@Invariant</comment>
  </data>
  <data name="ScriptAdded" xml:space="preserve">
    <value>Script at '{0}' added as '{1}'.</value>
    <comment>0 : script source
1 : script InvariantName@Invariant</comment>
  </data>
  <data name="ScriptAlreadyExistsCannotAdd" xml:space="preserve">
    <value>Couldn't add script at '{0}' as script '{1}' already exists.</value>
    <comment>0 : script source
1 : script InvariantName@Invariant</comment>
  </data>
  <data name="ScriptDeleted" xml:space="preserve">
    <value>Script '{0}' deleted.</value>
    <comment>0 : script InvariantName@Invariant</comment>
  </data>
  <data name="ScriptExecutionAborted" xml:space="preserve">
    <value>Execution of '{0}' ('{1}') aborted.</value>
    <comment>0 : script InvariantName
1 : capability InvariantName@Invariant</comment>
  </data>
  <data name="ScriptExecutionCompleted" xml:space="preserve">
    <value>Execution of '{0}' ('{1}') completed. (exit code: {2}, success: {3})</value>
    <comment>0 : script InvariantName
1 : capability InvariantName
2 : script execution result exit code
3 : script execution result succeeded?@Invariant</comment>
  </data>
  <data name="ScriptExecutionPaused" xml:space="preserve">
    <value>Execution of '{0}' ('{1}') paused.</value>
    <comment>0 : script InvariantName
1 : capability InvariantName@Invariant</comment>
  </data>
  <data name="ScriptExecutionResumed" xml:space="preserve">
    <value>Execution of '{0}' ('{1}') resumed.</value>
    <comment>0 : script InvariantName
1 : capability InvariantName@Invariant</comment>
  </data>
  <data name="ScriptExecutionSkipped" xml:space="preserve">
    <value>Execution of '{0}' ('{1}') skipped.</value>
    <comment>0 : script InvariantName
1 : capability InvariantName@Invariant</comment>
  </data>
  <data name="ScriptLoadError" xml:space="preserve">
    <value>Script at '{0}' could not be loaded: {1}</value>
    <comment>0 : script source
1 : exception@Invariant</comment>
  </data>
  <data name="ScriptNotLoaded" xml:space="preserve">
    <value>Script at '{0}' was not loaded: {1}</value>
    <comment>0 : script source
1 : exception@Invariant</comment>
  </data>
  <data name="ScriptOverwritten" xml:space="preserve">
    <value>Script '{1}' overwritten by script at '{0}'.</value>
    <comment>0 : script source
1 : script InvariantName@Invariant</comment>
  </data>
  <data name="ScriptsSaved" xml:space="preserve">
    <value>Scripts saved.</value>
    <comment>@Invariant</comment>
  </data>
  <data name="SettingsReset" xml:space="preserve">
    <value>Settings reset.</value>
    <comment>@Invariant</comment>
  </data>
  <data name="SettingsSaved" xml:space="preserve">
    <value>Settings saved.</value>
    <comment>@Invariant</comment>
  </data>
  <data name="StartedScriptExecution" xml:space="preserve">
    <value>Started execution of {0} script(s).</value>
    <comment>0 : number of scripts@Invariant</comment>
  </data>
  <data name="SystemRestartInitiated" xml:space="preserve">
    <value>System restart initiated.</value>
    <comment>@Invariant</comment>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>An unhandled exception occured: {0}</value>
    <comment>0 : exception@Invariant</comment>
  </data>
  <data name="UpdateAvailable" xml:space="preserve">
    <value>Version {0} is available (current version is {1}).</value>
    <comment>0 : latest version
1 : current version@Invariant</comment>
  </data>
</root>